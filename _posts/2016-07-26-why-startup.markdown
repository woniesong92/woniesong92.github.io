---
layout: post
title: "내가 마이크로소프트를 버리고 스타트업에 간 이유"
date: 2016-07-26 06:00:00 -0800
categories: startup
---

난 코넬 대학교를 졸업한 뒤 첫 직장으로 마이크로소프트를 버리고 직원이 10명도 채 안되는 스타트업을 선택했다. 오늘의 글은 내가 왜 이런 결정을 내렸는지 설명하는 글이다.

![Microsoft Badge](/assets/posts/2016-07-26-why-startup/badge.jpg){: width="300" }

사원증

나는 대학교 3학년을 마치고 마이크로소프트에서 인턴쉽을 했다. 샌프란시스코에 있는 예머란 팀에서 일했는데 예머는 쉽게 말해 마이크로소프트가 서비스 하는 기업형 페이스북이다.

이곳의 근무 환경은 더할 나위없이 좋았다. 출퇴근 시간이 자유로운건 물론이고 특별히 미팅이 있지 않는 이상 집에서 일을 해도 상관 없었다. 냉장고는 음료수와 과일로 꽉 찼고 매일매일 새로운 간식거리가 있었으며 삼시세끼가 모두 제공되었다. 또 특별했던건 사내 거의 모든 의사소통이 이메일 대신 예머 (e.g. 사내 게시판) 에서 이루어 진것이다. 각 팀마다 예머 내에 그룹을 가지고 있었고 다른 팀에 있는 사람들도 자유롭게 그룹을 옮겨 다니며 글들을 읽을 수 있었다. 이로 인해 사내정치나 관료주의가 있을 수 없었고 효율적으로 의견 조율을 할 수 있었다. 이것은 자연스럽게 수평적인 조직문화로 이어져 직원들은 퇴근 후에도 직급을 가리지 않고 같이 모여 자주 놀았다.

그 외의 복지 또한 거의 완벽했다. 많은 월급은 물론이고 다운타운에 위치한 좋은 집, 교통비, 그리고 심지어 따로 용돈까지 모두 다 지원해줬다. 인턴들을 위한 다양한 이벤트들도 주기적으로 열었는데 마지막에는 공원 하나를 빌려서 마룬5를 초청해 단독 콘서트를 열어줬고 공연이 끝나고는 인턴들 모두에게 무려 노트북을 하나씩 다 선물해줬다.

이렇게 좋은 근무 환경에 비해 하는 일은 생각보다 힘들지 않았는데 학교 과제의 난이도가 10이라면 직장 일은 6정도 됐던 것 같다. 사실 인턴에게 맡길 수 있는 일이 한정돼 있기때문에 어쩔수 없는거겠지만 때때로는 내가 하는 일에 비해 너무 좋은 대우를 해주는 것 같은 생각이 들 때도 있어서 어떻게든 코드를 더 많이 쓸려고 노력 했다. 직급이 높아질수록 일의 난이도와 책임감이 인턴때보다는 많이 올라가는게 당연하겠지만 다른 직원들을 봐도 업무에 대한 스트레스를 크게 받는 것 같진 않았다. 그도 그럴것이 예머가 “오피스365 스위트” 에 포함돼서 굳이 영업을 하지 않아도 전세계에서 마이크로소프트를 사용하는 회사들이 알아서 써주기 때문이다. 내가 어릴때 한글97 안에 포함되어 있던 타자 연습 프로그램 처럼 마이크로소프트 오피스가 존재하는 한 예머가 죽을 일은 없다. 회사로써는 아마 이보다 더 안정적인 위치를 상상하기 힘들 것이다.

그래서 난 마이크로소프트를 버리고 스타트업을 선택했다.

이러한 결정을 내리기에 앞서 내가 하고 싶은 것과 하기 싫은게 뭔지 생각을 해봤다. 우선 나는 “남의 일” 을 하기 싫었다. 예머는 아무리 내가 살을 붙인다고 해도 결국엔 남의 것 (i.e. 마이크로소프트), 남의 일인게 분명했고 나는 정원에 잡초가 무성해지지 않게 정리해주는 정원사가 될 뿐이었다. 더 위험하게 느껴졌던건 이렇게 안락한 일 환경에 익숙해져 나태해져 버리면 어느새 옆집 정원의 잡초는 벨줄도 모르는 마이크로소프트 전용 정원사가 될까봐 두려웠다.

나는 내 일이 하고 싶었다. 개발을 본격적으로 시작하지도 않았을때 재미로 만든 간단한 앱을 몇 만명이 넘는 사용자들이 매 주 이용해주는 짜릿한 경험을 한 이후로 더욱 더 내 일에 대한 갈망이 가면 갈수록 커졌다. 사용자들과 직접 소통하는것도 좋았고 내가 그들의 생활을 아주 조금이나마 더 편하게 만들었다는게 보람찼다. 취미로 만든 간단한 앱 뿐만 아니라 내가 하는 모든 일에서 그 만큼의 자부심을 느끼고 싶었다. 영화가 끝나고 크레딧이 올라갈때 주연배우들의 이름이 나오는 것처럼 나도 독립 영화를 찍을 지언정 크레딧에 이름 세 글자를 크게 박고 내가 저 영화를 찍었다고 자랑하고 싶었다.

논리적으론 내가 직접 창업을 해야했지만 나는 아쉽게도 유명한 누구들 처럼 집 창고에서 혼자만의 사업에 올인할 정도의 깡은 없었다. 그런데 마침 그때 샌프란시스코에서 스타트업을 먼저 시작한 친구가 고맙게도 일을 같이 하자고 제안을 해줬고 그렇게 나는 “내 일”을 할 수 있는 자리로 들어가게 되었다.

![Fountain, 2016](/assets/posts/2016-07-26-why-startup/obiq.jpg){: width="300" }

내가 합류한 스타트업을 간략하게 설명하면 이름은 OnboardIQ 이고 하는 일은 사내 채용 시스템을 자동화 시켜주는 솔루션 (i.e Software As A Service) 을 제공한다. 주 고객은 On-demand 서비스를 하는 회사들인데 GrubHub 처럼 하루에도 몇 만명을 새로 고용하는 회사들이 우리에게 특히 더 많이 의존한다. 이런 회사들은 사람을 빨리 뽑아야 하는데 그렇다고 허투루 뽑을 수 없으니 백그라운드 체크, 인터뷰 스케쥴, 필요한 서류 수집 및 관리 등을 우리 솔루션을 이용해서 자동화한다. 그렇지 않으면 서비스를 빨리 확장하는게 거의 불가능하다.

OnboardIQ 에서 내가 맡은 주 역할은 개발에 관련된 모든 것과 새로운 개발자들을 찾아서 개발팀을 꾸리는 일이다. 아침에 회사에 도착하면 지난 밤에 쌓였던 고객들의 컴플레인들을 추려서 제일 심각한 것들부터 차례로 고친다. 그렇게 급한 불을 끄고 나면 만들던 새로운 서비스에 조금 집중 할 시간이 생기는데, 중간 중간에 또 새로 생긴 버그들을 고치거나 새로운 개발자를 뽑는 인터뷰도 해야한다. 그 외에도 직접 마케팅을 하거나 고객회사들과 미팅을 해서 기술관련 자문을 하는 일도 해야한다.

마이크로소프트때와 대비되는 업무량과 더불어 내가 가져야 하는 책임감의 무게도 다르다. 여기선 내가 만든 버그 하나로 인해 중요한 고객을 잃을 수가 있어서 코드를 commit 할 때 신중하지 않으면 문제가 생길때가 많다. 특히나 큰 고객을 유치하기 직전에는 원래 제공해주기로 했던 모든 기능들이 완벽하게 작동하지 않으면 잘 되고 있던 계약이 그대로 끊어져 버릴 수가 있어서 영업팀과 나 모두 신경이 극도로 곤두선다. 어느 날은 영업팀이 출장까지 가서 딜을 하는 도중에 버그가 생겼는데, 그 날이 내 휴가 첫 날이라 비행기에서 내리자마자 공항에서 핸드폰 네트워크를 써가며 다급하게 버그를 고친적도 있다.

매일 이런 업무들을 어떻게든 소화 하다보면 당연히 체력적으로도 힘들다. 1년이 넘는 코드가 쌓인 서비스의 버그를 고친다는게 생각보다 쉬운 일이 아니고 커진 책임감이 부담으로 다가올때도 많다. 마이크로소프트에 있었으면 힘들지 않은만큼만 일 하면서도 더 좋은 혜택을 받고 보장된 승진이나 보너스도 받을 수 있었을 것이다.

하지만 확실한건 나는 여기서 훨씬 빠르게 성장하고 있고 또 마침내 “내 일” 을 하고 있다는거다. 다른 투자자들을 만났을때나 CTO 들과 대면했을때 어떻게 해야하는지, 고객 회사들과의 소통은 어떻게 하는게 좋은지, 영업을 할때 중요한 것은 무엇인지, 이렇게 작은 회사도 운영하는게 얼마나 힘든지, 새로운 서비스를 어떻게 하면 더 빠르게 좋은 퀄리티로 만들 수 있는지 등을 동시에 배울 수 있는 기회는 스타트업을 직접 해보는 것 밖엔 없다. 내가 직접 처음부터 끝까지 만든 기능으로 한 달 매출이 \$x 만큼 올랐을때나 고객과 소통을 직접 할때는 내가 옛날에 혼자 만든 앱을 서비스 할때와 비슷한 카타르시즘을 느낀다.

우리 스타트업은 멀쩡히 다니던 대학교를 자퇴한 친구, 딜로이트에서 컨설팅을 하다가 사표를 낸 친구, 바텐딩을 하다가 팁으로 백만원을 쉽게 내는 사람을 보고 다음 날 바로 일을 그만 둔 친구들이 모여서 한 팀을 이뤘다. 여긴 이제 더 이상 먹을거리로 가득찬 냉장고나 빵빵한 복지도 없다. 우리는 안락함을 스스로 포기하고 100명이 시작하면 99명이 실패한다는 스타트업을 시작 했다. 우리 모두 각자 내린 결정이 틀리지 않았다는걸 어떻게든 증명해야한다.

내가 스타트업을 선택한게 정말 최선의 결정이었는지는 시간만이 말해줄것이다. 하지만 한가지 확실한건, 난 내가 원하는걸 좇아왔고 내 결정에 대해 후회하지 않는다.
